# List linters:
# go run github.com/golangci/golangci-lint/v2/cmd/golangci-lint@latest linters --no-config
#
# Run lastest:
# go run github.com/golangci/golangci-lint/v2/cmd/golangci-lint@latest run --fix
#
# Doc:
# https://golangci-lint.run/docs/configuration/file

version: "2"

formatters:
  enable:
    # gci
    # gofmt
    - gofumpt
    # goimports
    # golines
    # swaggo
  settings:
    gofumpt:
      extra-rules: true

linters:
  default: all

  disable:
    - arangolint # arangoDB
    - depguard # list of acceptable packages, exclude other packages
    - dogsled # Checks assignments with too many blank identifiers (e.g. x, _, _, _, := f()).
    - embeddedstructfieldcheck
    - err113 # do not define dynamic errors, use wrapped static errors instead
    - forbidigo
    - ginkgolinter
    - gochecknoglobals
    - godox
    - gomoddirectives # directives 'replace', 'retract' and 'excludes' in go.mod
    - gomodguard # another Go module dependencies blocker, more featured than depguard
    - ireturn
    - mnd # Magic number
    - nlreturn
    - nonamedreturns
    - staticcheck
    - tagliatelle # disable because is moves the 'comment' tag in the beginning
    - testpackage
    - wrapcheck
    - wsl
    - wsl_v5

  settings:
    # https://golangci-lint.run/docs/linters/configuration/#copyloopvar
    copyloopvar: # detects places where loop variables are copied
      check-alias: true # Check all assigning the loop variable to another variable

    decorder:
      # Default: `type`, `const`, `var` and `func`
      dec-order:
        - type
        - const
        - var
        - func
      ignore-underscore-vars: false # Default: false (underscore vars are not ignored)
      disable-dec-order-check: false # Default: true (order of declarations is not checked at all)
      disable-init-func-first-check: false # Default: true = `init` func can be anywhere in file (does not have to be declared before all other functions)
      disable-dec-num-check: false # Default: true = multiple global `type`, `const` and `var` declarations are allowed
      disable-type-dec-num-check: false # Default: false (type statements are not ignored)
      disable-const-dec-num-check: false # Default: false (const statements are not ignored)
      disable-var-dec-num-check: false # Default: false (var statements are not ignored)

    # Checks the order of functions, methods, and constructors.
    # https://golangci-lint.run/docs/linters/configuration/#funcorder
    funcorder:
      # constructors after the structure declaration.
      constructor: true # Default: true
      # exported methods of a structure before the non-exported ones.
      struct-method: true # Default: true
      # alphabetically sorted
      alphabetical: false # Default: false

    dupl:
      threshold: 94 # Tokens count to trigger issue. Default: 150

    # Embedded types should be at the top of the field list of a struct, and there must be an empty line separating embedded fields from regular fields
    embeddedstructfieldcheck:
      # Checks that sync.Mutex and sync.RWMutex are not used as embedded fields.
      forbid-mutex: true # Default: false

    # https://golangci-lint.run/docs/linters/configuration/#errcheck
    # https://github.com/kisielk/errcheck

    errcheck:
      # check errors in type assertions: `a := b.(MyStruct)`
      check-type-assertions: true
      # blank identifier: `num, _ := strconv.Atoi(numStr)`.
      check-blank: false
      # disable the errcheck built-in exclude list
      disable-default-exclusions: false
      # https://github.com/kisielk/errcheck#excluding-functions
      exclude-functions:
        - (*os.File).Close
        - (*os.File).Write
        - (io.Closer).Close
        - encoding/json.Marshal
        - encoding/json.MarshalIndent
        - fmt.Printf
        - io.Copy(*bytes.Buffer)
        - io.Copy(os.Stdout)
        - io/ioutil.ReadFile
      # Display function signature instead of selector.
      verbose: true

    # Checks types passed to the json encoding functions. Reports unsupported types and reports occurrences where the check for the returned error can be omitted
    # https://golangci-lint.run/docs/linters/configuration/#errchkjson
    errchkjson:
      # With check-error-free-encoding set to true, errchkjson does warn about errors
      # from json encoding functions that are safe to be ignored,
      # because they are not possible to happen.
      #
      # if check-error-free-encoding is set to true and errcheck linter is enabled,
      # it is recommended to add the following exceptions to prevent from false positives:
      #
      #     linters:
      #       settings:
      #         errcheck:
      #           exclude-functions:
      #             - encoding/json.Marshal
      #             - encoding/json.MarshalIndent
      #
      check-error-free-encoding: true # Default: false
      # Issue on struct encoding that doesn't have exported fields.
      report-no-exported: false # Default: false

    # Find code that can cause problems with the error wrapping scheme introduced in Go 1.13.
    errorlint:
      # Check whether fmt.Errorf uses the %w verb for formatting errors.
      # See the https://github.com/polyfloyd/go-errorlint for caveats.
      # Default: true
      errorf: true
      # Permit more than 1 %w verb, valid per Go 1.20 (requires `errorf: true`).
      # Default: true
      errorf-multi: true
      # Check for plain type assertions and type switches.
      # Default: true
      asserts: true
      # Check for plain error comparisons.
      # Default: true
      comparison: true

    # enum switch statements
    # https://golangci-lint.run/docs/linters/configuration/#exhaustive
    exhaustive:
      # Program elements to check for exhaustiveness.
      # Default: [ switch ]
      check:
        - switch
        - map
      # Presence of "default" case in switch statements satisfies exhaustiveness,
      # even if all enum members are not listed.
      # Default: false
      default-signifies-exhaustive: false
      # Enum members matching the supplied regex do not have to be listed in
      # switch statements to satisfy exhaustiveness.
      # Default: ""
      ignore-enum-members: ""
      # Enum types matching the supplied regex do not have to be listed in
      # switch statements to satisfy exhaustiveness.
      # Default: ""
      ignore-enum-types: ""
      # Consider enums only in package scopes, not in inner scopes.
      # Default: false
      package-scope-only: false
      # Only run exhaustive check on switches with "//exhaustive:enforce" comment.
      # Default: false
      explicit-exhaustive-switch: false
      # Only run exhaustive check on map literals with "//exhaustive:enforce" comment.
      # Default: false
      explicit-exhaustive-map: false
      # Switch statement requires default case even if exhaustive.
      # Default: false
      default-case-required: true

    # https://golangci-lint.run/docs/linters/configuration/#exhaustruct
    exhaustruct:
      # List of regular expressions to match type names that should be processed.
      # Anonymous structs can be matched by '<anonymous>' alias.
      #
      # Each regular expression must match the full type name, including package path.
      # For example, to match type `net/http.Cookie` regular expression should be `.*/http\.Cookie`,
      # but not `http\.Cookie`.
      # Default: []
      include:
        - '.+\.Test'
        - 'example\.com/package\.ExampleStruct[\d]{1,2}'
      # List of regular expressions to match type names that should be excluded from processing.
      # Anonymous structs can be matched by '<anonymous>' alias.
      # Has precedence over `include`.
      # Each regular expression must match the full type name, including package path.
      # For example, to match type `net/http.Cookie` regular expression should be `.*/http\.Cookie`,
      # but not `http\.Cookie`.
      # Default: []
      exclude:
        - '.+/cobra\.Command$'
      # Allows empty structures, effectively excluding them from the check.
      allow-empty: true
      # List of regular expressions to match type names that should be allowed to be empty.
      # Anonymous structs can be matched by '<anonymous>' alias.
      # Each regular expression must match the full type name, including package path.
      # For example, to match type `net/http.Cookie` regular expression should be `.*/http\.Cookie`,
      # but not `http\.Cookie`.
      # Default: []
      allow-empty-rx:
        - '.*/http\.Cookie'
      # Allows empty structures in return statements
      allow-empty-returns: true
      # Allows empty structures in variable declarations.
      allow-empty-declarations: true

    # https://golangci-lint.run/docs/linters/configuration/#fatcontext
    fatcontext:
      # Check for potential fat contexts in struct pointers. May generate false positives.
      check-struct-pointers: true

    # https://golangci-lint.run/docs/linters/configuration/#forbidigo
    forbidigo:
      # Forbid the following identifiers (list of regexp).
      # Default: ["^(fmt\\.Print(|f|ln)|print|println)$"]
      forbid:
        - msg: Use logger instead of fmt.Print
          pattern: ^fmt\.Print.*$
        - msg: Use logger instead of log
          pattern: ^log\..*$
        # Built-in bootstrapping functions.
        - pattern: ^print(ln)?$
        # Forbid spew Dump, whether it is called as function or method.
        # Depends on analyze-types below.
        - pattern: ^spew\.(ConfigState\.)?Dump$
      # Exclude godoc examples from forbidigo checks.
      exclude-godoc-examples: true # Default: true
      # Instead of matching the literal source code, use type information to handle import renaming.
      analyze-types: false # Default: false

    gochecksumtype:
      # Presence of `default` case in switch statements satisfies exhaustiveness, if all members are not listed.
      # Default: true
      default-signifies-exhaustive: false
      # Include shared interfaces in the exhaustiveness check.
      # Default: false
      include-shared-interfaces: true

    # Finds repeated strings that could be replaced by a constant
    goconst:
      min-len: 2
      min-occurrences: 5

    # https://golangci-lint.run/docs/linters/configuration/#funlen
    funlen:
      lines: 100
      statements: 50
      ignore-comments: true # Default: true

    # cognitive complexity: function only
    gocognit:
      min-complexity: 40 # Default: 30 (but we recommend 10-20)

    # cyclomatic complexity: function only
    gocyclo:
      min-complexity: 40 # Default: 30 (but we recommend 10-20)

    # cyclomatic complexity: function and package
    cyclop:
      # The maximal code complexity to report.
      # Default: 10
      max-complexity: 40
      # The maximal average package complexity.
      # If it's higher than 0.0 (float) the check is enabled.
      # Default: 0.0
      package-average: 7.5

    # https://golangci-lint.run/docs/linters/configuration/#gocritic
    gocritic:
      enable-all: true
      disabled-checks:
        - defaultCaseOrder
        - emptyFallthrough
        # - dupImport # https://github.com/go-critic/go-critic/issues/845
        # - ifElseChain
        # - octalLiteral
        # - singleCaseSwitch # Every time this occurred in the code, there was no other way
        # - unnamedResult
        # - whyNoLint
        # - wrapperFunc
        # - yodaStyleExpr

    # comments end in a period
    godot:
      # Comments to be checked: `declarations`, `toplevel`, `noinline` or `all`.
      scope: declarations
      exclude:
        # Exclude todo and fixme comments.
        - "^fixme:"
        - "^todo:"
      # Check that each sentence ends with a period.
      # Default: true
      period: true
      # Check that each sentence starts with a capital letter.
      # Default: false
      capital: true

    # Detects FIXME, TODO, BUG inside comments that might be left in the code accidentally and should be resolved before merging
    godox:
      keywords: ["TODO", "FIXME", "BUG", "HACK"]

    goheader:
      template: |-
        Copyright 2025 The contributors of Goinfer.
        This file is part of Goinfer, a LLM proxy under the MIT License.
        SPDX-License-Identifier: MIT

    gosec:
      confidence: medium
      excludes:
        - G104
      severity: medium

    # https://golangci-lint.run/docs/linters/configuration/#govet
    govet:
      enable-all: true
      settings:
        shadow:
          strict: false

    importas:
      alias:
        - alias: errors
          pkg: github.com/pkg/errors
        - alias: ctx
          pkg: context

    lll:
      line-length: 222

    loggercheck:
      klog: true
      logr: true
      slog: true
      zap: true

    makezero:
      always: false

    misspell:
      locale: US

    nakedret:
      max-func-lines: 15

    nolintlint:
      allow-unused: false # report any unused nolint directives
      require-explanation: false # don't require an explanation for nolint directives
      require-specific: true # require nolint directives to be specific about which linter is being skipped

    paralleltest:
      ignore-missing: false

    prealloc:
      for-loops: true
      range-loops: true
      simple: true

    promlinter:
      strict: false

    # https://golangci-lint.run/docs/linters/configuration/#revive
    revive:
      max-open-files: 50 # Max open files at the same time.
      severity: warning # can be error, See https://github.com/mgechev/revive#configuration
      enable-all-rules: true # Enable all available rules (Default: false)
      directives: # See https://github.com/mgechev/revive#comment-directives
        - name: specify-disable-reason
          severity: error
      confidence: 0.9 # Default: 0.8 => ignore linting errors with less than 0.8 confidence
      # Run `GL_DEBUG=revive golangci-lint run --enable-only=revive` to see default, all available rules, and enabled rules.
      rules:
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#add-constant
        - name: add-constant # use constant for magic numbers and string literals.
          disabled: true
          arguments:
            - max-lit-count: "3"
              allow-strs: '"","Listen","error","url","file","use","granite3.3_8b_Q4_K_M"'
              allow-ints: "0,1,2,3,10,0o600,32,64,2048"
              allow-floats: "0.0,0.,1.0,1.,2.0,2."
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#argument-limit
        - name: argument-limit
          arguments: [6]
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#atomic
        - name: atomic # mistaken usage of the sync/atomic package
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#banned-characters
        - name: banned-characters
          arguments: ["Ω", "Σ", "σ"]
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#bare-return
        - name: bare-return # Warns on bare (a.k.a. naked) returns
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#blank-imports
        - name: blank-imports # Blank import should be only in a main or test package, or have a comment justifying it
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#bool-literal-in-expr
        - name: bool-literal-in-expr # don't do: if value == false { … }
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#call-to-gc
        - name: call-to-gc # garbage collector
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#cognitive-complexity
        - name: cognitive-complexity
          arguments: [19]
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#comment-spacings
        - name: comment-spacings # Warn: //no space between // and the start
          # arguments: [] # use arguments for the exceptions
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#comments-density
        - name: comments-density
          arguments: [8] # comments represent 8% or more
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#confusing-naming
        - name: confusing-naming
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#confusing-results
        - name: confusing-results # return multiple values of the same type could induce error
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#constant-logical-expr
        - name: constant-logical-expr
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#context-as-argument
        - name: context-as-argument # context.Context = first parameter of a function
          arguments:
            - allow-types-before: "*testing.T,*github.com/user/repo/testing.Harness"
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#context-keys-type
        - name: context-keys-type # Basic types should not be used as a key in context.WithValue
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#cyclomatic
        - name: cyclomatic
          arguments: [18] # max function complexity
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#datarace
        - name: datarace # dataraces by goroutines capturing named return values and for-range values
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#deep-exit
        - name: deep-exit # functions should not stop program execution by exiting (except main and init)
          exclude: ["github.com/LM4eu/goinfer", "goinfer.go", "./goinfer.go", "./..."]
          disabled: true
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#defer
        - name: defer # mistakes when using defer statement
          # arguments: # enable all
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#dot-imports
        - name: dot-imports # Importing with . makes the programs much harder to understand
          arguments:
            - allowed-packages: [""]
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#duplicated-imports
        - name: duplicated-imports
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#early-return
        - name: early-return # minimize nesting statements with early return
          arguments:
            # - "preserve-scope"
            - "allow-jump"
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#empty-block
        - name: empty-block
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#empty-lines
        - name: empty-lines # warns heading or trailing newlines in code blocks
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#enforce-map-style
        - name: enforce-map-style # enforces consistent usage of make(map[type]type) or map[type]type{} for map initialization
          exclude: [""]   # "make":    enforces the usage of make(map[type]type)
          arguments:      # "literal": enforces the usage of      map[type]type{}
            - "literal"   # "any":     both (default)
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#enforce-repeated-arg-type-style
        - name: enforce-repeated-arg-type-style # consistency in the declaration of repeated argument and return value types in Go functions
          arguments: ["short"]
            # # Or this parameter:
            # - func-arg-style: "full"
            #   func-ret-val-style: "short"
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#enforce-slice-style
        - name: enforce-slice-style # initialize slice with make([]type, 0), []type{}, or var []type
          exclude: [""]   # "make":    enforces the usage of make([]type, 0)
          arguments:      # "literal": enforces the usage of      []type{}
            - "literal"   # "nil":     enforces the usage of  var []type
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#enforce-switch-style
        - name: enforce-switch-style
          arguments: ["allowDefaultNotLast"] # (empty) or "allowNoDefault"
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#error-naming
        - name: error-naming # variables of type error => prefix err
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#error-return
        - name: error-return # errors should be last in the list of returned values
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#error-strings
        - name: error-strings # error messages: no capitalized, no end with punctuation, no newline
          # arguments:  # <-- provide the user functions that create errors
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#errorf
        - name: errorf # replace errors.New(fmt.Sprintf()) => fmt.Errorf()
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#exported
        - name: exported # Exported function should have comments
          arguments:
            - "check-private-receivers"             # enables checking public methods of private types
            - "disable-stuttering-check"            # disables checking for method names that stutter with the package name (i.e. avoid failure messages of the form type name will be used as x.XY by other packages, and that stutters; consider calling this Y)
            - "say-repetitive-instead-of-stutters"  # replaces the use of the term stutters by repetitive in failure messages
            - "check-public-interface"              # enabled checking public method definitions in public interface types
            - "disable-checks-on-constants"         # disable all checks on constant declarations
            - "disable-checks-on-functions"         # disable all checks on function declarations
            - "disable-checks-on-methods"           # disable all checks on method declarations
            - "disable-checks-on-types"             # disable all checks on type declarations
            - "disable-checks-on-variables"         # disable all checks on variable declarations
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#file-header
        - name: file-header # common header for all source files in a project
          arguments:
            - Copyright 2025 The contributors of Goinfer.
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#file-length-limit
        - name: file-length-limit # maximum number of lines per file
          arguments:
            - max: 2000
              skip-comments: true
              skip-blank-lines: false
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#filename-format
        - name: filename-format # source file names = ^[_A-Za-z0-9][_A-Za-z0-9-]*\.go$
          arguments:
            - "^[a-z][_a-z0-9-]*\\.go$"
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#flag-parameter
        - name: flag-parameter # control-coupled = a function controls the flow of another by passing it information on what to do
          disabled: true
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#function-result-limit
        - name: forbidden-call-in-wg-go # Since Go 1.25, it is possible to create goroutines with the method waitgroup.Go
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#function-length
        - name: function-length # Functions returning too many results can be hard to understand/use
          arguments: [100, 0]
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#function-result-limit
        - name: function-result-limit # Functions returning too many results
          arguments: [4]
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#get-return
        - name: get-return # prefix Get => function is supposed to return a value
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#identical-branches
        - name: identical-branches # if-then-else conditional with identical implementations in both branches
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#identical-ifelseif-branches
        - name: identical-ifelseif-branches
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#identical-ifelseif-conditions
        - name: identical-ifelseif-conditions
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#identical-switch-branches
        - name: identical-switch-branches
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#identical-switch-conditions
        - name: identical-switch-conditions
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#if-return
        - name: if-return
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#import-alias-naming
        - name: import-alias-naming # lowercase import alias names
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#import-shadowing
        - name: import-shadowing
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#imports-blocklist
        - name: imports-blocklist
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#increment-decrement
        - name: increment-decrement # i += 1 and i -= 1 => i++ and i--
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#indent-error-flow
        - name: indent-error-flow # redundant else-blocks that can be eliminated from the code
          # arguments:
          #   - "preserve-scope" # preserve-scope: do not increase variable scope
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#line-length-limit
        - name: line-length-limit
          arguments: [300]
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#max-control-nesting
        - name: max-control-nesting
          arguments: [3]
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#max-public-structs
        - name: max-public-structs
          arguments: [8]
          disabled: true
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#modifies-parameter
        - name: modifies-parameter
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#modifies-value-receiver
        - name: modifies-value-receiver
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#nested-structs
        - name: nested-structs
          disabled: true
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#optimize-operands-order
        - name: optimize-operands-order
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#package-comments
        - name: package-comments
          disabled: true
          exclude: ["goinfer.go"]
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#package-directory-mismatch
        - name: package-directory-mismatch # name a package after the directory containing it
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#range
        - name: range
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#range-val-address
        - name: range-val-address
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#range-val-in-closure
        - name: range-val-in-closure
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#receiver-naming
        - name: receiver-naming # receiver names in a method should reflect their identity
          arguments:
            - max-length: 3
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#redefines-builtin-id
        - name: redefines-builtin-id # Constant names like false, true, nil ; function names like append, make ; 
          exclude: [""]              # and basic type names like bool, and byte are not reserved words of the language
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#redundant-build-tag
        - name: redundant-build-tag
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#redundant-import-alias
        - name: redundant-import-alias
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#redundant-test-main-exit
        - name: redundant-test-main-exit
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#string-format
        - name: string-format # some string literals are used for messages presented to users
          # arguments:
          #   - - 'core.WriteError[1].Message'
          #     - '/^([^A-Z]|$)/'
          #     - must not start with a capital letter
          #   - - 'fmt.Errorf[0]'
          #     - '/(^|[^\.!?])$/'
          #     - must not end in punctuation
          #   - - panic
          #     - '/^[^\n]*$/'
          #     - must not contain line breaks
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#string-of-int
        - name: string-of-int
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#struct-tag
        - name: struct-tag # struct tags are not checked at compile time
          # arguments:
          #   - "json,inline"
          #   - "bson,outline,gnu"
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#superfluous-else
        - name: superfluous-else
          # arguments:
          #   - "preserve-scope"
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#time-date
        - name: time-date
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#time-equal
        - name: time-equal
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#time-naming
        - name: time-naming
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#unchecked-type-assertion
        - name: unchecked-type-assertion # to prevent unexpected panic()
          # arguments:
          #   - accept-ignored-assertion-result: true # accept: foo, _ := bar(.*Baz).
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#unconditional-recursion
        - name: unconditional-recursion
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#unexported-naming
        - name: unexported-naming
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#unexported-return
        - name: unexported-return
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#unhandled-error
        - name: unhandled-error # function must explicitly handle returned errors
          arguments:
            - '^os\.(CreateTemp|WriteFile|Chmod)$'
            - "^fmt.Printf"
            - '^(bytes\.Buffer|string\.Writer)\.Write(Byte|Rune|String)?$'
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#unnecessary-format
        - name: unnecessary-format
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#unnecessary-stmt
        - name: unnecessary-stmt
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#unreachable-code
        - name: unreachable-code
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#unsecure-url-scheme
        - name: unsecure-url-scheme
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#unused-parameter
        - name: unused-parameter # unused parameters can be a symptom of an unfinished refactoring or a bug
          arguments:
            - allow-regex: "^_"
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#unused-receiver
        - name: unused-receiver
          arguments:
            - allow-regex: "^_"
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#use-any
        - name: use-any
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#use-errors-new
        - name: use-errors-new
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#use-fmt-print
        - name: use-fmt-print # print and println => equivalents fmt.*
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#use-waitgroup-go
        - name: use-waitgroup-go
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#useless-break
        - name: useless-break
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#useless-fallthrough
        - name: useless-fallthrough
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#var-declaration
        - name: var-declaration
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#var-naming
        - name: var-naming # warns when initialism, variable or package naming conventions are not followed
          disabled: true # does not allow "model_flags"
          arguments:                       # relax the rules
            - ["model_flags"] # AllowList
          #   - ["VM"] # DenyList
          #   - - skip-initialism-name-checks: true
          #       upper-case-const: true
          #       skip-package-name-checks: true
          #       extra-bad-package-names:
          #         - helpers
          #         - models
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#waitgroup-by-value
        - name: waitgroup-by-value

    # https://golangci-lint.run/docs/linters/configuration/#sloglint
    sloglint:
      context: scope

    # https://golangci-lint.run/docs/linters/configuration/#staticcheck
    staticcheck:
      # https://staticcheck.io/docs/options#checks
      checks: ["all"]
      http-status-code-whitelist: []

    # Align struct tags: `json:"bar" validate:"required" yml:"bar"`
    # https://golangci-lint.run/docs/linters/configuration/#tagalign
    tagalign:
      align: true
      sort: true
      strict: true

    # https://github.com/ldez/tagliatelle
    tagliatelle:
      case:
        rules:
          whatever: snake

    # https://github.com/butuzov/ireturn
    # https://golangci-lint.run/usage/linters/#ireturn
    ireturn:
      allow:
        - anon # anonymous interfaces such as: interface{Stop()}
        - error # error interface
        - stdlib # standard library interfaces
        - github.com/prometheus\/client_golang\/prometheus.Gauge
        - github.com/prometheus\/client_golang\/prometheus.Counter

    testifylint:
      disable-all: false
      enable:
        - bool-compare
        - compares
        - empty
        - error-is-as
        - error-nil
        - expected-actual
        - go-require
        - float-compare
        - len
        - nil-compare
        - require-error
        - suite-extra-assert-call
        - suite-thelper

    unparam:
      check-exported: false

    # https://golangci-lint.run/docs/linters/configuration/#varnamelen
    varnamelen:
      max-distance: 6 # Ignore variables in "small scope" of this number of lines (max), Default: 5
      min-name-length: 3 # Ignore variables having this minimum name length, Default: 3
      check-receiver: false # Check method receivers, Default: false
      check-return: false # Check named return values, Default: false
      check-type-param: true # Check type parameters, Default: false
      ignore-type-assert-ok: true # Ignore "ok" variables that hold the bool return value of a type assertion, Default: false
      ignore-map-index-ok: true # Ignore "ok" variables that hold the bool return value of a map index, Default: false
      ignore-chan-recv-ok: true # Ignore "ok" variables that hold the bool return value of a channel receive, Default: false
      ignore-names: # Ignore these variable names.
        - tt
        - er
      ignore-decls: # Ignore these variable declarations.
        - c echo.Context
        - e *echo.Echo
        - er  error # avoid shadowing err
        - err error
        - i int
        - k string
        - m echo.Map
        - mi ModelInfo
        - v string

    whitespace:
      multi-if: false # true => newline or comment after multi-line if statement
      multi-func: false # true => newline or comment after multi-line function signature

    wrapcheck:
      ignore-interface-regexps:
        - ^(?i)error$
      ignore-package-globs:
        - errors/*
        - fmt/*
      ignore-sigs:
        - errors.New(
        - errors.New(
        - fmt.Errorf(

run:
  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1
  # which dirs to skip: they won't be analyzed;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but next dirs are always skipped independently
  # from this option's value:
  #     vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  go: "1.25"
  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 5m

