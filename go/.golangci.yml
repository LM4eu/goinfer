# Documentation:
# https://golangci-lint.run/usage/configuration/#run-configuration

# Run the last version:
# go run github.com/golangci/golangci-lint/v2/cmd/golangci-lint@latest run --fix

# List the available linters:
# go run github.com/golangci/golangci-lint/v2/cmd/golangci-lint@latest linters --no-config --color always

version: "2"

formatters:
  enable:
    # gci
    # gofmt
    - gofumpt
    # goimports
    # golines
    # swaggo
  settings:
    gofumpt:
      extra-rules: true

linters:
  default: all

  disable:
    - arangolint # arangoDB
    - depguard # list of acceptable packages, exclude other packages
    - dogsled # Checks assignments with too many blank identifiers (e.g. x, _, _, _, := f()).
    - err113 # do not define dynamic errors, use wrapped static errors instead
    - forbidigo
    - ginkgolinter
    - gochecknoglobals
    - gomoddirectives # directives 'replace', 'retract' and 'excludes' in go.mod
    - gomodguard # another Go module dependencies blocker, more featured than depguard
    - ireturn
    - mnd # Magic number
    - nlreturn
    - revive
    - staticcheck
    - testpackage
    - wrapcheck
    - wsl
    - wsl_v5

  enable:
    - asasalint # Check for pass []any as any in variadic func(â€¦any).
    - asciicheck # Checks that all code identifiers does not have non-ASCII symbols in the name
    - bidichk # Checks for dangerous unicode character sequences
    - bodyclose # Checks whether HTTP response body is closed successfully
    - canonicalheader # Canonicalheader checks whether net/http.Header uses canonical header
    - containedctx # detects struct contained context.Context field
    - contextcheck # Check whether the function uses a non-inherited context
    - copyloopvar # detects places where loop variables are copied
    - cyclop # function and package cyclomatic complexity
    - decorder # declaration order and count of types, constants, variables and functions
    - dupl # Detects duplicate fragments of code
    - dupword # Checks for duplicate words in the source code
    - durationcheck
    - embeddedstructfieldcheck
    - errcheck
    - errchkjson
    - errname
    - errorlint
    - exhaustive
    - exhaustruct
    - exptostd
    - fatcontext
    - forcetypeassert
    - funcorder
    - funlen
    - gocheckcompilerdirectives
    - gochecknoinits
    - gochecksumtype
    - gocognit
    - goconst
    - gocritic
    - gocyclo
    - godot
    - godox
    - goheader
    - goprintffuncname # Checks that printf-like functions are named with f at the end.
    - gosec # Inspects source code for security problems
    - gosmopolitan
    - govet
    - grouper
    - iface
    - importas
    - inamedparam
    - ineffassign
    - interfacebloat
    - intrange
    - lll
    - loggercheck
    - maintidx
    - makezero
    - mirror
    - misspell
    - musttag
    - nakedret
    - nestif
    - nilerr
    - nilnesserr
    - nilnil
    - noctx
    - noinlineerr
    - nolintlint
    - nonamedreturns
    - nosprintfhostport
    - paralleltest
    - perfsprint
    - prealloc
    - predeclared
    - promlinter
    - protogetter
    - reassign
    - recvcheck
    - rowserrcheck
    - sloglint
    - spancheck
    - sqlclosecheck
    - tagalign
    - tagliatelle
    - testableexamples
    - testifylint
    - thelper
    - tparallel
    - unconvert
    - unparam
    - unused
    - usestdlibvars
    - usetesting
    - varnamelen
    - wastedassign
    - whitespace
    - zerologlint

  settings:
    ##### ORDER ######

    decorder:
      # Default: `type`, `const`, `var` and `func`
      dec-order:
        - type
        - const
        - var
        - func
      ignore-underscore-vars: false # Default: false (underscore vars are not ignored)
      disable-dec-order-check: false # Default: true (order of declarations is not checked at all)
      disable-init-func-first-check: false # Default: true = `init` func can be anywhere in file (does not have to be declared before all other functions)
      disable-dec-num-check: false # Default: true = multiple global `type`, `const` and `var` declarations are allowed
      disable-type-dec-num-check: false # Default: false (type statements are not ignored)
      disable-const-dec-num-check: false # Default: false (const statements are not ignored)
      disable-var-dec-num-check: false # Default: false (var statements are not ignored)

    # Checks the order of functions, methods, and constructors.
    # https://golangci-lint.run/docs/linters/configuration/#funcorder
    funcorder:
      # constructors after the structure declaration.
      constructor: true # Default: true
      # exported methods of a structure before the non-exported ones.
      struct-method: true # Default: true
      # alphabetically sorted
      alphabetical: false # Default: false

    # https://golangci-lint.run/docs/linters/configuration/#copyloopvar
    copyloopvar: # detects places where loop variables are copied
      check-alias: true # Check all assigning the loop variable to another variable

    dupl:
      threshold: 94 # Tokens count to trigger issue. Default: 150

    # Embedded types should be at the top of the field list of a struct, and there must be an empty line separating embedded fields from regular fields
    embeddedstructfieldcheck:
      # Checks that sync.Mutex and sync.RWMutex are not used as embedded fields.
      forbid-mutex: true # Default: false

    # https://golangci-lint.run/docs/linters/configuration/#errcheck
    # https://github.com/kisielk/errcheck
    errcheck:
      # check errors in type assertions: `a := b.(MyStruct)`
      check-type-assertions: true
      # blank identifier: `num, _ := strconv.Atoi(numStr)`.
      check-blank: false
      # disable the errcheck built-in exclude list
      disable-default-exclusions: false
      # https://github.com/kisielk/errcheck#excluding-functions
      exclude-functions:
        - (*os.File).Close
        - (*os.File).Write
        - encoding/json.Marshal
        - encoding/json.MarshalIndent
        - fmt.Printf
        - io.Copy(*bytes.Buffer)
        - io.Copy(os.Stdout)
        - io/ioutil.ReadFile
      # Display function signature instead of selector.
      verbose: true

    # Checks types passed to the json encoding functions. Reports unsupported types and reports occurrences where the check for the returned error can be omitted
    # https://golangci-lint.run/docs/linters/configuration/#errchkjson
    errchkjson:
      # With check-error-free-encoding set to true, errchkjson does warn about errors
      # from json encoding functions that are safe to be ignored,
      # because they are not possible to happen.
      #
      # if check-error-free-encoding is set to true and errcheck linter is enabled,
      # it is recommended to add the following exceptions to prevent from false positives:
      #
      #     linters:
      #       settings:
      #         errcheck:
      #           exclude-functions:
      #             - encoding/json.Marshal
      #             - encoding/json.MarshalIndent
      #
      check-error-free-encoding: true # Default: false
      # Issue on struct encoding that doesn't have exported fields.
      report-no-exported: false # Default: false

    # Find code that can cause problems with the error wrapping scheme introduced in Go 1.13.
    errorlint:
      # Check whether fmt.Errorf uses the %w verb for formatting errors.
      # See the https://github.com/polyfloyd/go-errorlint for caveats.
      # Default: true
      errorf: true
      # Permit more than 1 %w verb, valid per Go 1.20 (requires `errorf: true`).
      # Default: true
      errorf-multi: true
      # Check for plain type assertions and type switches.
      # Default: true
      asserts: true
      # Check for plain error comparisons.
      # Default: true
      comparison: true

    # enum switch statements
    # https://golangci-lint.run/docs/linters/configuration/#exhaustive
    exhaustive:
      # Program elements to check for exhaustiveness.
      # Default: [ switch ]
      check:
        - switch
        - map
      # Presence of "default" case in switch statements satisfies exhaustiveness,
      # even if all enum members are not listed.
      # Default: false
      default-signifies-exhaustive: false
      # Enum members matching the supplied regex do not have to be listed in
      # switch statements to satisfy exhaustiveness.
      # Default: ""
      ignore-enum-members: ""
      # Enum types matching the supplied regex do not have to be listed in
      # switch statements to satisfy exhaustiveness.
      # Default: ""
      ignore-enum-types: ""
      # Consider enums only in package scopes, not in inner scopes.
      # Default: false
      package-scope-only: false
      # Only run exhaustive check on switches with "//exhaustive:enforce" comment.
      # Default: false
      explicit-exhaustive-switch: false
      # Only run exhaustive check on map literals with "//exhaustive:enforce" comment.
      # Default: false
      explicit-exhaustive-map: false
      # Switch statement requires default case even if exhaustive.
      # Default: false
      default-case-required: true

    # https://golangci-lint.run/docs/linters/configuration/#exhaustruct
    exhaustruct:
      # List of regular expressions to match type names that should be processed.
      # Anonymous structs can be matched by '<anonymous>' alias.
      #
      # Each regular expression must match the full type name, including package path.
      # For example, to match type `net/http.Cookie` regular expression should be `.*/http\.Cookie`,
      # but not `http\.Cookie`.
      # Default: []
      include:
        - '.+\.Test'
        - 'example\.com/package\.ExampleStruct[\d]{1,2}'
      # List of regular expressions to match type names that should be excluded from processing.
      # Anonymous structs can be matched by '<anonymous>' alias.
      # Has precedence over `include`.
      # Each regular expression must match the full type name, including package path.
      # For example, to match type `net/http.Cookie` regular expression should be `.*/http\.Cookie`,
      # but not `http\.Cookie`.
      # Default: []
      exclude:
        - '.+/cobra\.Command$'
      # Allows empty structures, effectively excluding them from the check.
      allow-empty: true
      # List of regular expressions to match type names that should be allowed to be empty.
      # Anonymous structs can be matched by '<anonymous>' alias.
      # Each regular expression must match the full type name, including package path.
      # For example, to match type `net/http.Cookie` regular expression should be `.*/http\.Cookie`,
      # but not `http\.Cookie`.
      # Default: []
      allow-empty-rx:
        - '.*/http\.Cookie'
      # Allows empty structures in return statements
      allow-empty-returns: true
      # Allows empty structures in variable declarations.
      allow-empty-declarations: true

    # https://golangci-lint.run/docs/linters/configuration/#fatcontext
    fatcontext:
      # Check for potential fat contexts in struct pointers. May generate false positives.
      check-struct-pointers: true

    # https://golangci-lint.run/docs/linters/configuration/#forbidigo
    forbidigo:
      # Forbid the following identifiers (list of regexp).
      # Default: ["^(fmt\\.Print(|f|ln)|print|println)$"]
      forbid:
        - msg: Use logger instead of fmt.Print
          pattern: ^fmt\.Print.*$
        - msg: Use logger instead of log
          pattern: ^log\..*$
        # Built-in bootstrapping functions.
        - pattern: ^print(ln)?$
        # Forbid spew Dump, whether it is called as function or method.
        # Depends on analyze-types below.
        - pattern: ^spew\.(ConfigState\.)?Dump$
      # Exclude godoc examples from forbidigo checks.
      exclude-godoc-examples: true # Default: true
      # Instead of matching the literal source code, use type information to handle import renaming.
      analyze-types: false # Default: false

    gochecksumtype:
      # Presence of `default` case in switch statements satisfies exhaustiveness, if all members are not listed.
      # Default: true
      default-signifies-exhaustive: false
      # Include shared interfaces in the exhaustiveness check.
      # Default: false
      include-shared-interfaces: true

    # Finds repeated strings that could be replaced by a constant
    goconst:
      min-len: 2
      min-occurrences: 5

    # https://golangci-lint.run/docs/linters/configuration/#funlen
    funlen:
      lines: 100
      statements: 50
      ignore-comments: true # Default: true

    # cognitive complexity: function only
    gocognit:
      min-complexity: 40 # Default: 30 (but we recommend 10-20)

    # cyclomatic complexity: function only
    gocyclo:
      min-complexity: 40 # Default: 30 (but we recommend 10-20)

    # cyclomatic complexity: function and package
    cyclop:
      # The maximal code complexity to report.
      # Default: 10
      max-complexity: 40
      # The maximal average package complexity.
      # If it's higher than 0.0 (float) the check is enabled.
      # Default: 0.0
      package-average: 7.5

    gocritic:
      enabled-tags:
        - diagnostic
        - style
        - performance
        - experimental
        - opinionated
      disabled-checks:
        - captLocal
        - unnamedResult
        - whyNoLint
        # - dupImport # https://github.com/go-critic/go-critic/issues/845
        # - ifElseChain
        # - octalLiteral
        # - wrapperFunc
        # - yodaStyleExpr
        # - singleCaseSwitch # Every time this occurred in the code, there was no other way

    # comments end in a period
    godot:
      # Comments to be checked: `declarations`, `toplevel`, `noinline` or `all`.
      scope: declarations
      exclude:
        # Exclude todo and fixme comments.
        - "^fixme:"
        - "^todo:"
      # Check that each sentence ends with a period.
      # Default: true
      period: true
      # Check that each sentence starts with a capital letter.
      # Default: false
      capital: true

    # Detects FIXME, TODO, BUG inside comments that might be left in the code accidentally and should be resolved before merging
    godox:
      keywords: ["TODO", "FIXME", "BUG", "HACK"]

    goheader:
      template: |-
        Copyright 2025 The contributors of Goinfer.
        This file is part of Goinfer, a LLM proxy under the MIT License.
        SPDX-License-Identifier: MIT

    gosec:
      confidence: medium
      excludes:
        - G104
      severity: medium

    govet:
      enable-all: true
      settings:
        shadow:
          strict: false

    importas:
      alias:
        - alias: errors
          pkg: github.com/pkg/errors
        - alias: ctx
          pkg: context

    lll:
      line-length: 160

    loggercheck:
      klog: true
      logr: true
      slog: true
      zap: true

    makezero:
      always: false

    misspell:
      locale: US

    nakedret:
      max-func-lines: 15

    nolintlint:
      allow-unused: false # report any unused nolint directives
      require-explanation: false # don't require an explanation for nolint directives
      require-specific: true # require nolint directives to be specific about which linter is being skipped

    paralleltest:
      ignore-missing: false

    prealloc:
      for-loops: true
      range-loops: true
      simple: true

    promlinter:
      strict: false

    revive:
      enable-all-rules: true

    # https://golangci-lint.run/docs/linters/configuration/#sloglint
    sloglint:
      context: scope

    # https://golangci-lint.run/docs/linters/configuration/#staticcheck
    staticcheck:
      # https://staticcheck.io/docs/options#checks
      checks: ["all"]
      http-status-code-whitelist: []

    # Align struct tags: `json:"bar" validate:"required" yml:"bar"`
    # https://golangci-lint.run/docs/linters/configuration/#tagalign
    tagalign:
      align: true
      sort: true
      strict: true

    # https://github.com/ldez/tagliatelle
    tagliatelle:
      case:
        rules:
          json: snake
          yaml: snake
          whatever: snake

    # https://github.com/butuzov/ireturn
    # https://golangci-lint.run/usage/linters/#ireturn
    ireturn:
      allow:
        - anon # anonymous interfaces such as: interface{Stop()}
        - error # error interface
        - stdlib # standard library interfaces
        - github.com/prometheus\/client_golang\/prometheus.Gauge
        - github.com/prometheus\/client_golang\/prometheus.Counter

    testifylint:
      disable-all: false
      enable:
        - bool-compare
        - compares
        - empty
        - error-is-as
        - error-nil
        - expected-actual
        - go-require
        - float-compare
        - len
        - nil-compare
        - require-error
        - suite-extra-assert-call
        - suite-thelper

    unparam:
      check-exported: false

    # https://golangci-lint.run/docs/linters/configuration/#varnamelen
    varnamelen:
      max-distance: 6 # Ignore variables in "small scope" of this number of lines (max), Default: 5
      min-name-length: 3 # Ignore variables having this minimum name length, Default: 3
      check-receiver: false # Check method receivers, Default: false
      check-return: false # Check named return values, Default: false
      check-type-param: true # Check type parameters, Default: false
      ignore-type-assert-ok: true # Ignore "ok" variables that hold the bool return value of a type assertion, Default: false
      ignore-map-index-ok: true # Ignore "ok" variables that hold the bool return value of a map index, Default: false
      ignore-chan-recv-ok: true # Ignore "ok" variables that hold the bool return value of a channel receive, Default: false
      ignore-names: # Ignore these variable names.
        - tt
      ignore-decls: # Ignore these variable declarations.
        - err error
        - er  error # avoid shadowing err
        - c echo.Context
        - e *echo.Echo
        - i int
        - k string
        - m echo.Map
        - mi ModelInfo
        - v string

    whitespace:
      multi-if: true

    wrapcheck:
      ignore-interface-regexps:
        - ^(?i)error$
      ignore-package-globs:
        - errors/*
        - fmt/*
      ignore-sigs:
        - errors.New(
        - errors.New(
        - fmt.Errorf(

run:
  # timeout for analysis, e.g. 30s, 5m, default is 1m
  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1
  # which dirs to skip: they won't be analyzed;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but next dirs are always skipped independently
  # from this option's value:
  #     vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  go: "1.25"
  timeout: 5m

